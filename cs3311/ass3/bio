#!/usr/bin/python3
# COMP3311 20T3 Ass3 ... get Name's biography/filmography

import sys
import psycopg2
#from helpers import whatever, functions, you, need

# define any local helper functions here

# set up some globals

usage = "Usage: bio 'NamePattern' [Year]"
db = None
pattern = None
year = None
input = None

# process command-line args
argc = len(sys.argv)
if argc == 2:
  pattern = sys.argv[1]
  input = '\''+pattern+'\''
elif argc == 3 and (sys.argv[2]).isdigit():
  pattern = sys.argv[1]
  year = sys.argv[2]
  input = '\''+pattern+'\''+' '+str(year)
else:
  print(usage)
  exit()

# manipulate database
select_names1 = """
select name, birth_year, death_year, id
from Names n
where n.name ~* %s
order by birth_year, n.id;
"""
select_names2 = """
select name, birth_year, death_year, id
from Names n
where n.name ~* %s and birth_year = %s
order by birth_year, n.id;
"""
select_movies = """
select m.title, m.start_year, m.id
from Movies m
  join Principals p on (m.id = p.movie_id)
where p.name_id = %s
order by m.start_year, m.title
"""
select_actors = """
select n.name, a.played
from Movies m
  join  Acting_roles a on (m.id = a.movie_id)
  join  Principals p on (m.id = p.movie_id and a.name_id = p.name_id)
  join  Names n on (n.id = a.name_id)
where m.id = %s and n.id = %s
order by p.ordering, a.played
"""
select_crews = """
select n.name, c.role
from  Movies m
  join  Crew_roles c on (m.id = c.movie_id)
  join  Principals p on (m.id = p.movie_id and c.name_id = p.name_id)
  join  Names n on (n.id = c.name_id)
where m.id = %s and n.id = %s
order by p.ordering, c.role
"""
try:
  db = psycopg2.connect("dbname=imdb")
  # ... add your code here ...
  cur = db.cursor()
  num_names = 0
  if year == None:
    cur.execute(select_names1, [pattern])
    num_names = len(list(cur))
    cur.execute(select_names1, [pattern])
  else:
    cur.execute(select_names2, (pattern, year))
    num_names = len(list(cur))
    cur.execute(select_names2, (pattern, year))
  
  if num_names == 0:
    print('No name matching '+input)
  elif num_names == 1:
    name_id = None
    for names in cur.fetchall():
      if names[1] == None:
        print(names[0], '(???)')
      elif names[2] == None:
        print(names[0], '('+str(names[1])+'-)')
      else:
        print(names[0], '('+str(names[1])+'-'+str(names[2])+')')
      name_id = names[3]
    print('===============')
    cur.execute(select_movies, [name_id])
    for movies in cur.fetchall():
      print(movies[0], '('+str(movies[1])+')')
      cur.execute(select_actors, (movies[2], name_id))
      for acting in cur.fetchall():
        print(' playing', acting[1])
      cur.execute(select_crews, (movies[2], name_id))
      for crewing in cur.fetchall():
        print(' as', crewing[1].capitalize())
  else:
    print('Names matching '+input)
    print('===============')
    for names in cur.fetchall():
      if names[1] == None:
        print(names[0], '(???)')
      elif names[2] == None:
        print(names[0], '('+str(names[1])+'-)')
      else:
        print(names[0], '('+str(names[1])+'-'+str(names[2])+')')
except psycopg2.Error as err:
  print("DB error: ", err)
finally:
  if db:
    db.close()

